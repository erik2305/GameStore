//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameStore.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CVGS_Tables : DbContext
    {
        public CVGS_Tables()
            : base("name=CVGS_Tables")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CreditCard> CreditCards { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeePayCategory> EmployeePayCategories { get; set; }
        public virtual DbSet<EmployeePosition> EmployeePositions { get; set; }
        public virtual DbSet<EsrbContentDescriptor> EsrbContentDescriptors { get; set; }
        public virtual DbSet<EsrbRating> EsrbRatings { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<Game> Games { get; set; }
        public virtual DbSet<GameCategory> GameCategories { get; set; }
        public virtual DbSet<GameCompany> GameCompanies { get; set; }
        public virtual DbSet<GameEsrbContentDescriptor> GameEsrbContentDescriptors { get; set; }
        public virtual DbSet<GamePerspective> GamePerspectives { get; set; }
        public virtual DbSet<GameStatu> GameStatus { get; set; }
        public virtual DbSet<GameSubCategory> GameSubCategories { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LocationType> LocationTypes { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Platform> Platforms { get; set; }
        public virtual DbSet<Population> Populations { get; set; }
        public virtual DbSet<PopulationClassification> PopulationClassifications { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplierContact> SupplierContacts { get; set; }
        public virtual DbSet<Sku> Skus { get; set; }
        public virtual DbSet<AttendeeList> AttendeeLists { get; set; }
        public virtual DbSet<Event> Events { get; set; }
    
        public virtual int EmployeeInsert(string personSurname, string personGivenName, string personStreet, string personCity, string personProvinceCode, string personCountryCode, string personPostalCode, string personLandLine, string personExtension, string personMobile, string personFax, string personEmail, string employeeGln, string employeePositionCode, string employeePayCategoryCode, string employeeDepartmentCode, Nullable<System.DateTime> employeeBirthDate, Nullable<System.DateTime> employeeHireDate, Nullable<System.DateTime> employeeTerminationDate, string employeeNote, string userName)
        {
            var personSurnameParameter = personSurname != null ?
                new ObjectParameter("personSurname", personSurname) :
                new ObjectParameter("personSurname", typeof(string));
    
            var personGivenNameParameter = personGivenName != null ?
                new ObjectParameter("personGivenName", personGivenName) :
                new ObjectParameter("personGivenName", typeof(string));
    
            var personStreetParameter = personStreet != null ?
                new ObjectParameter("personStreet", personStreet) :
                new ObjectParameter("personStreet", typeof(string));
    
            var personCityParameter = personCity != null ?
                new ObjectParameter("personCity", personCity) :
                new ObjectParameter("personCity", typeof(string));
    
            var personProvinceCodeParameter = personProvinceCode != null ?
                new ObjectParameter("personProvinceCode", personProvinceCode) :
                new ObjectParameter("personProvinceCode", typeof(string));
    
            var personCountryCodeParameter = personCountryCode != null ?
                new ObjectParameter("personCountryCode", personCountryCode) :
                new ObjectParameter("personCountryCode", typeof(string));
    
            var personPostalCodeParameter = personPostalCode != null ?
                new ObjectParameter("personPostalCode", personPostalCode) :
                new ObjectParameter("personPostalCode", typeof(string));
    
            var personLandLineParameter = personLandLine != null ?
                new ObjectParameter("personLandLine", personLandLine) :
                new ObjectParameter("personLandLine", typeof(string));
    
            var personExtensionParameter = personExtension != null ?
                new ObjectParameter("personExtension", personExtension) :
                new ObjectParameter("personExtension", typeof(string));
    
            var personMobileParameter = personMobile != null ?
                new ObjectParameter("personMobile", personMobile) :
                new ObjectParameter("personMobile", typeof(string));
    
            var personFaxParameter = personFax != null ?
                new ObjectParameter("personFax", personFax) :
                new ObjectParameter("personFax", typeof(string));
    
            var personEmailParameter = personEmail != null ?
                new ObjectParameter("personEmail", personEmail) :
                new ObjectParameter("personEmail", typeof(string));
    
            var employeeGlnParameter = employeeGln != null ?
                new ObjectParameter("employeeGln", employeeGln) :
                new ObjectParameter("employeeGln", typeof(string));
    
            var employeePositionCodeParameter = employeePositionCode != null ?
                new ObjectParameter("employeePositionCode", employeePositionCode) :
                new ObjectParameter("employeePositionCode", typeof(string));
    
            var employeePayCategoryCodeParameter = employeePayCategoryCode != null ?
                new ObjectParameter("employeePayCategoryCode", employeePayCategoryCode) :
                new ObjectParameter("employeePayCategoryCode", typeof(string));
    
            var employeeDepartmentCodeParameter = employeeDepartmentCode != null ?
                new ObjectParameter("employeeDepartmentCode", employeeDepartmentCode) :
                new ObjectParameter("employeeDepartmentCode", typeof(string));
    
            var employeeBirthDateParameter = employeeBirthDate.HasValue ?
                new ObjectParameter("employeeBirthDate", employeeBirthDate) :
                new ObjectParameter("employeeBirthDate", typeof(System.DateTime));
    
            var employeeHireDateParameter = employeeHireDate.HasValue ?
                new ObjectParameter("employeeHireDate", employeeHireDate) :
                new ObjectParameter("employeeHireDate", typeof(System.DateTime));
    
            var employeeTerminationDateParameter = employeeTerminationDate.HasValue ?
                new ObjectParameter("employeeTerminationDate", employeeTerminationDate) :
                new ObjectParameter("employeeTerminationDate", typeof(System.DateTime));
    
            var employeeNoteParameter = employeeNote != null ?
                new ObjectParameter("employeeNote", employeeNote) :
                new ObjectParameter("employeeNote", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeInsert", personSurnameParameter, personGivenNameParameter, personStreetParameter, personCityParameter, personProvinceCodeParameter, personCountryCodeParameter, personPostalCodeParameter, personLandLineParameter, personExtensionParameter, personMobileParameter, personFaxParameter, personEmailParameter, employeeGlnParameter, employeePositionCodeParameter, employeePayCategoryCodeParameter, employeeDepartmentCodeParameter, employeeBirthDateParameter, employeeHireDateParameter, employeeTerminationDateParameter, employeeNoteParameter, userNameParameter);
        }
    
        public virtual int GameCompanyCount(ObjectParameter rowCount, Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GameCompanyCount", rowCount, idParameter);
        }
    
        public virtual int GameCompanyDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GameCompanyDelete", idParameter);
        }
    
        public virtual int GameCompanyImport(Nullable<int> id, string englishName, string frenchName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var englishNameParameter = englishName != null ?
                new ObjectParameter("englishName", englishName) :
                new ObjectParameter("englishName", typeof(string));
    
            var frenchNameParameter = frenchName != null ?
                new ObjectParameter("frenchName", frenchName) :
                new ObjectParameter("frenchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GameCompanyImport", idParameter, englishNameParameter, frenchNameParameter);
        }
    
        public virtual int GameCompanyInsert(string englishName, string frenchName)
        {
            var englishNameParameter = englishName != null ?
                new ObjectParameter("englishName", englishName) :
                new ObjectParameter("englishName", typeof(string));
    
            var frenchNameParameter = frenchName != null ?
                new ObjectParameter("frenchName", frenchName) :
                new ObjectParameter("frenchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GameCompanyInsert", englishNameParameter, frenchNameParameter);
        }
    
        public virtual int GameCompanyUpdate(Nullable<int> id, string englishName, string frenchName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var englishNameParameter = englishName != null ?
                new ObjectParameter("englishName", englishName) :
                new ObjectParameter("englishName", typeof(string));
    
            var frenchNameParameter = frenchName != null ?
                new ObjectParameter("frenchName", frenchName) :
                new ObjectParameter("frenchName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GameCompanyUpdate", idParameter, englishNameParameter, frenchNameParameter);
        }
    
        public virtual int InventoryCount(ObjectParameter rowCount, Nullable<System.Guid> productGuid, string locationGln)
        {
            var productGuidParameter = productGuid.HasValue ?
                new ObjectParameter("productGuid", productGuid) :
                new ObjectParameter("productGuid", typeof(System.Guid));
    
            var locationGlnParameter = locationGln != null ?
                new ObjectParameter("locationGln", locationGln) :
                new ObjectParameter("locationGln", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryCount", rowCount, productGuidParameter, locationGlnParameter);
        }
    
        public virtual int InventoryDelete(Nullable<System.Guid> productGuid, string locationGln)
        {
            var productGuidParameter = productGuid.HasValue ?
                new ObjectParameter("productGuid", productGuid) :
                new ObjectParameter("productGuid", typeof(System.Guid));
    
            var locationGlnParameter = locationGln != null ?
                new ObjectParameter("locationGln", locationGln) :
                new ObjectParameter("locationGln", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryDelete", productGuidParameter, locationGlnParameter);
        }
    
        public virtual int InventoryImport(Nullable<System.Guid> productGuid, string locationGln, Nullable<short> newOnHand, Nullable<short> newOnOrder, Nullable<short> usedOnHand, string userName)
        {
            var productGuidParameter = productGuid.HasValue ?
                new ObjectParameter("productGuid", productGuid) :
                new ObjectParameter("productGuid", typeof(System.Guid));
    
            var locationGlnParameter = locationGln != null ?
                new ObjectParameter("locationGln", locationGln) :
                new ObjectParameter("locationGln", typeof(string));
    
            var newOnHandParameter = newOnHand.HasValue ?
                new ObjectParameter("newOnHand", newOnHand) :
                new ObjectParameter("newOnHand", typeof(short));
    
            var newOnOrderParameter = newOnOrder.HasValue ?
                new ObjectParameter("newOnOrder", newOnOrder) :
                new ObjectParameter("newOnOrder", typeof(short));
    
            var usedOnHandParameter = usedOnHand.HasValue ?
                new ObjectParameter("usedOnHand", usedOnHand) :
                new ObjectParameter("usedOnHand", typeof(short));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryImport", productGuidParameter, locationGlnParameter, newOnHandParameter, newOnOrderParameter, usedOnHandParameter, userNameParameter);
        }
    
        public virtual int InventoryInsert(Nullable<System.Guid> productGuid, string locationGln, Nullable<short> newOnHand, Nullable<short> newOnOrder, Nullable<short> usedOnHand, string userName)
        {
            var productGuidParameter = productGuid.HasValue ?
                new ObjectParameter("productGuid", productGuid) :
                new ObjectParameter("productGuid", typeof(System.Guid));
    
            var locationGlnParameter = locationGln != null ?
                new ObjectParameter("locationGln", locationGln) :
                new ObjectParameter("locationGln", typeof(string));
    
            var newOnHandParameter = newOnHand.HasValue ?
                new ObjectParameter("newOnHand", newOnHand) :
                new ObjectParameter("newOnHand", typeof(short));
    
            var newOnOrderParameter = newOnOrder.HasValue ?
                new ObjectParameter("newOnOrder", newOnOrder) :
                new ObjectParameter("newOnOrder", typeof(short));
    
            var usedOnHandParameter = usedOnHand.HasValue ?
                new ObjectParameter("usedOnHand", usedOnHand) :
                new ObjectParameter("usedOnHand", typeof(short));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryInsert", productGuidParameter, locationGlnParameter, newOnHandParameter, newOnOrderParameter, usedOnHandParameter, userNameParameter);
        }
    
        public virtual int InventoryUpdate(Nullable<System.Guid> productGuid, string locationGln, Nullable<short> newOnHand, Nullable<short> newOnOrder, Nullable<short> usedOnHand, string userName)
        {
            var productGuidParameter = productGuid.HasValue ?
                new ObjectParameter("productGuid", productGuid) :
                new ObjectParameter("productGuid", typeof(System.Guid));
    
            var locationGlnParameter = locationGln != null ?
                new ObjectParameter("locationGln", locationGln) :
                new ObjectParameter("locationGln", typeof(string));
    
            var newOnHandParameter = newOnHand.HasValue ?
                new ObjectParameter("newOnHand", newOnHand) :
                new ObjectParameter("newOnHand", typeof(short));
    
            var newOnOrderParameter = newOnOrder.HasValue ?
                new ObjectParameter("newOnOrder", newOnOrder) :
                new ObjectParameter("newOnOrder", typeof(short));
    
            var usedOnHandParameter = usedOnHand.HasValue ?
                new ObjectParameter("usedOnHand", usedOnHand) :
                new ObjectParameter("usedOnHand", typeof(short));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InventoryUpdate", productGuidParameter, locationGlnParameter, newOnHandParameter, newOnOrderParameter, usedOnHandParameter, userNameParameter);
        }
    
        public virtual int LogAlert(string @event, string detail)
        {
            var eventParameter = @event != null ?
                new ObjectParameter("event", @event) :
                new ObjectParameter("event", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogAlert", eventParameter, detailParameter);
        }
    
        public virtual int LogError(string @event, string detail)
        {
            var eventParameter = @event != null ?
                new ObjectParameter("event", @event) :
                new ObjectParameter("event", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogError", eventParameter, detailParameter);
        }
    
        public virtual int LogInformation(string @event, string detail)
        {
            var eventParameter = @event != null ?
                new ObjectParameter("event", @event) :
                new ObjectParameter("event", typeof(string));
    
            var detailParameter = detail != null ?
                new ObjectParameter("detail", detail) :
                new ObjectParameter("detail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogInformation", eventParameter, detailParameter);
        }
    }
}
